---
# https://docs.avantra.com/product-guide/20.11/avantra/installing-avantra-server.html#installing-on-unix-like-operating-systems

### Prepare host machine
- name: Ensure required packages are installed
  yum:
    name:
      - libnsl2
      - java-1.8.0-openjdk
      - sudo
      - hostname
      - python3-psycopg2
    state: present

### Create Avantra User (no special GID/UID)
# TODO: what groups are necessary?
- name: Ensure avantra group exists
  group:
    name: "{{ avantra_server_user }}"
    state: present

- name: Ensure Avantar User exists
  user:
    name: "{{ avantra_server_user }}"
    shell: /bin/false
    groups: "{{ avantra_server_user }}"
    append: true

- name: ensure installation target directory exists
  file:
    path: "{{ avantra_server_install_base_dir }}"
    state: directory
    owner: "{{ avantra_server_user }}"
    group: "{{ avantra_server_user }}"
    mode: '0755'

- name: Check available space in installation directory
  shell: |
    set -o pipefail
    df -m {{ avantra_server_install_base_dir }} --output\=avail | tail -1
  register: syslink_freespace_mb
  changed_when: false
- name: Fail if not enough space available
  fail:
    msg:
      - "{{ avantra_server_install_base_dir }} does not have the minimum space required to continue"
      - " (30Gb needed, {{ syslink_freespace_mb.stdout|int }}mb available)"
  when: syslink_freespace_mb.stdout|int < 30000


### Install postgres
# TODO: move to dedicated role
# TODO: make optional
# TODO: if postgres is not installed on the same node, create database step needs credentials

- name: Install postgresql
  yum:
    name: postgresql-server
    state: present  # TODO: fix version

- name: Check if PostgreSQL is initialized
  ansible.builtin.stat:
    path: "/var/lib/pgsql/data/pg_hba.conf"
  register: is_postgres_initialized

- name: Init db
  command:
    cmd: postgresql-setup --initdb
    creates: "/var/lib/pgsql/data/pg_hba.conf"
  register: register_avantra_server_postgress_initdb
  when: not is_postgres_initialized.stat.exists

- name: Enable and start postgresql service
  ansible.builtin.systemd:
    name: postgresql
    state: started
    enabled: true
    masked: false

- name: Create datbase
  community.general.postgresql_db:
    name: "{{ avantra_server_db_name }}"
    encoding: UTF-8
    # TODO: collation types?
    # lc_collate: de_DE.UTF-8
    # lc_ctype: de_DE.UTF-8
  become: true
  become_user: postgres

- name: Create db user
  postgresql_user:
    state: present
    name: "{{ avantra_server_db_username }}"
    password: "{{ avantra_server_db_password }}"
  become: true
  become_user: postgres

- name: Grant db user access to app db
  postgresql_privs:
    type: database
    database: "{{ avantra_server_db_name }}"
    roles: "{{ avantra_server_db_username }}"
    grant_option: false
    privs: all
  become: true
  become_user: postgres

- name: Allow md5 connection for the db user
  postgresql_pg_hba:
    dest: "~/data/pg_hba.conf"
    contype: host
    databases: all
    method: md5
    users: "{{ avantra_server_db_username }}"
    create: true
  become: true
  become_user: postgres
  notify: restart postgres

##  TODO: really restart at the end? and only when changed to MD5?

- name: find Installer
  shell: |
     set -o pipefail
     export LANG=C
     ls -1 avantra-server-*-linux.bin | sort -rV | head -1
  args:
    chdir: "{{ avantra_server_install_base_dir }}"
  changed_when: false
  register: register_avantra_installer_binary

- name: debug shell output
  debug:
     var: register_avantra_installer_binary

- name: ensure installer is executable
  file:
    path: "{{ avantra_server_install_base_dir }}/{{ register_avantra_installer_binary.stdout }}"
    state: file
    mode: '0755'
    owner: "{{ avantra_server_user }}"
    group: root

- name: get avantra server version
  set_fact:
    __avantra_server_version: "{{ register_avantra_installer_binary.stdout.split('-').2 }}"

- name: Extract installer
  command:
    cmd: "./{{ register_avantra_installer_binary.stdout }} --noexec --keep --target avantra-server-inst"
  become: true
  become_user: "{{ avantra_server_user }}"
  args:
    chdir: "{{ avantra_server_install_base_dir }}"
    creates: avantra-server-inst

- name: Run installer
  command: java -Djna.tmpdir=./tmp -jar ./avantra-server-inst/xandria_server_installer.jar install --version {{ __avantra_server_version }} --no-start --silent
  become: true
  become_user: "{{ avantra_server_user }}"
  args:
    chdir: "{{ avantra_server_install_base_dir }}"
    creates: master

- name: Delete extracted installer
  file:
    state: absent
    path: "{{ avantra_server_install_base_dir }}/avantra-server-inst"

- name: Delete installer temporary directory
  file:
    state: absent
    path: "{{ avantra_server_install_base_dir }}/tmp"


### Configure Avantra server

- name: Configure UI service
  ansible.builtin.template:
    src: xangui.cfg.j2
    dest: "{{ avantra_server_install_base_dir }}/xangui/cfg/xangui.cfg"
    owner: "{{ avantra_server_user }}"
    group: "{{ avantra_server_user }}"
    mode: '0600'

- name: Create configuration directory
  file:
    path: "{{ avantra_server_install_base_dir }}/.xandria"
    state: directory
    owner: "{{ avantra_server_user }}"
    group: "{{ avantra_server_user }}"
    mode: '0700'

- name: Configure DB connection
  ansible.builtin.template:
    src: database.cfg.j2
    dest: "{{ avantra_server_install_base_dir }}/.xandria/database.cfg"
    owner: "{{ avantra_server_user }}"
    group: "{{ avantra_server_user }}"
    mode: '0600'


### Start Avantra server

- name: Start master service
  command: "{{ avantra_server_install_base_dir }}/master/rc.master start"
  become: true
  become_user: "{{ avantra_server_user }}"
  args:
    chdir: "{{ avantra_server_install_base_dir }}"

- name: Start UI service
  command: "{{ avantra_server_install_base_dir }}/xangui/rc.xangui start"
  become: true
  become_user: "{{ avantra_server_user }}"
  args:
    chdir: "{{ avantra_server_install_base_dir }}"
